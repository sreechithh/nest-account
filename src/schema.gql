# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Role {
  id: ID!
  name: String!
  createdAt: DateTime!
  isActive: Boolean!
  users: [User!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ExpenseSubCategory {
  id: Int!
  expenseCategoryId: Float!
  name: String!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  expenseCategory: ExpenseCategory!
  expenses: [Expense!]
}

type ExpenseCategory {
  id: Int!
  name: String!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  subCategories: [ExpenseSubCategory!]
  expenses: [Expense!]
}

type Staff {
  id: ID!
  user: Int!
  company: Company!
}

type Company {
  id: Int!
  name: String!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  bankAccounts: [BankAccount!]!
  staff: Staff!
}

type BankAccount {
  id: ID!
  name: String!
  accountNumber: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: Float!
  updatedBy: Float!
  isActive: Boolean!
  bankBalance: Float
  company: Company!
  bankTransactions: [BankTransaction!]
}

type BankTransaction {
  id: Int!
  bankId: Int!
  amount: Float!
  type: TransactionType!
  comment: String!
  createdAt: DateTime!
  createdBy: Int!
  bankBalance: Int
  bankAccount: BankAccount!
  createdByUser: User!
  expense: Expense
}

enum TransactionType {
  CREDIT
  DEBIT
}

type Expense {
  id: Int!
  adminResponse: DateTime
  amount: Float!
  comments: String
  status: ExpenseStatus!
  expenseCategoryId: Float!
  expenseSubCategoryId: Float!
  bankTransactionId: Float
  companyId: Float!
  paidAt: DateTime
  paidDate: Date
  isPaymentRequest: Boolean
  createdAt: DateTime!
  createdBy: Int!
  updatedAt: DateTime!
  updatedBy: Int
  expenseCategory: ExpenseCategory!
  expenseSubCategory: ExpenseSubCategory!
  employeeExpense: EmployeeExpense
  bankTransaction: BankTransaction
  company: Company
}

"""The status of an expense"""
enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type EmployeeExpense {
  id: Int!
  user: User!
  expense: Expense!
}

type User {
  id: ID!
  name: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User
  updatedBy: User
  isActive: Boolean!
  roles: [Role!]!
  transactions: [BankTransaction!]
  staff: Staff
  employeeExpenses: [EmployeeExpense!]
}

type Forecast {
  id: ID!
  amount: Float!
  comment: String!
  payDate: Date
  expenseCategory: ExpenseCategory!
  expenseSubCategory: ExpenseSubCategory!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  updatedBy: User!
  staff: User
  company: Company!
}

type CommonUsersResponse {
  statusCode: Int!
  message: String!
  data: User
}

type PaginatedUsersResponse {
  data: [User!]!
  totalRows: Int!
  totalPages: Int!
  currentPage: Int!
  statusCode: Int!
  message: String!
}

type CommonBankAccountResponse {
  statusCode: Int!
  message: String!
  data: BankAccount
}

type PaginatedBankAccountResponse {
  data: [BankAccount!]!
  totalRows: Int!
  totalPages: Int!
  currentPage: Int!
  statusCode: Int!
  message: String!
}

type LoginResponse {
  access_token: String!
}

type CommonCompanyResponse {
  statusCode: Int!
  message: String!
  data: Company
}

type PaginatedCompanyResponse {
  data: [Company!]!
  totalRows: Int!
  totalPages: Int!
  currentPage: Int!
  statusCode: Int!
  message: String!
}

type CommonExpenseCategoryResponse {
  statusCode: Int!
  message: String!
  data: ExpenseCategory
}

type PaginatedExpenseCategoryResponse {
  data: [ExpenseCategory!]!
  totalRows: Int!
  totalPages: Int!
  currentPage: Int!
  statusCode: Int!
  message: String!
}

type CommonExpenseSubCategoryResponse {
  statusCode: Int!
  message: String!
  data: ExpenseSubCategory
}

type PaginatedExpenseSubCategoryResponse {
  data: [ExpenseSubCategory!]!
  totalRows: Int!
  totalPages: Int!
  currentPage: Int!
  statusCode: Int!
  message: String!
}

type CommonBankTransactionResponse {
  statusCode: Int!
  message: String!
  data: BankTransaction
}

type PaginatedBankTransactionResponse {
  data: [BankTransaction!]!
  totalRows: Int!
  totalPages: Int!
  currentPage: Int!
  statusCode: Int!
  message: String!
}

type CommonExpenseResponse {
  statusCode: Int!
  message: String!
  data: Expense
}

type PaginatedExpenseResponse {
  data: [Expense!]!
  totalRows: Int!
  totalPages: Int!
  currentPage: Int!
  statusCode: Int!
  message: String!
}

type CommonForecastResponse {
  statusCode: Int!
  message: String!
  data: Forecast
}

type PaginatedForecastResponse {
  data: [Forecast!]!
  totalRows: Int!
  totalPages: Int!
  currentPage: Int!
  statusCode: Int!
  message: String!
}

type Query {
  users(perPage: Int! = 10, page: Int! = 1, isActive: Boolean = false, role: String = null): PaginatedUsersResponse!
  user(id: Int!): CommonUsersResponse!
  bankAccounts(perPage: Int!, page: Int!): PaginatedBankAccountResponse!
  bankAccount(id: Int!): CommonBankAccountResponse!
  expenseCategories(perPage: Int!, page: Int!): PaginatedExpenseCategoryResponse!
  expenseCategory(id: Int!): CommonExpenseCategoryResponse!
  expenseSubCategories(perPage: Int!, page: Int!): PaginatedExpenseSubCategoryResponse!
  expenseSubCategory(id: Int!): CommonExpenseSubCategoryResponse!
  expenses(perPage: Int! = 10, page: Int!): PaginatedExpenseResponse!
  expense(id: Int!): CommonExpenseResponse!
  calculateExpense(month: Int, year: Int, startDate: String, endDate: String, companyId: Int): Float!
  bankTransactions(perPage: Int!, page: Int!): PaginatedBankTransactionResponse!
  bankTransaction(id: Int!): CommonBankTransactionResponse!
  companies(pageSize: Int! = 10, pageNumber: Int! = 1): PaginatedCompanyResponse!
  company(id: Int!): CommonCompanyResponse!
  forecasts(perPage: Int! = 10, page: Int! = 1, companyId: Int!): PaginatedForecastResponse!
  forecast(id: Int!): CommonForecastResponse!
  calculateForecast(month: Int, companyId: Int): Float!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): CommonUsersResponse!
  updateUser(updateUserInput: UpdateUserInput!): CommonUsersResponse!
  createBankAccount(createBankAccountInput: CreateBankAccountInput!): CommonBankAccountResponse!
  updateBankAccount(updateBankAccountInput: UpdateBankAccountInput!): CommonBankAccountResponse!
  removeBankAccount(id: Int!): CommonBankAccountResponse!
  login(email: String!, password: String!): LoginResponse!
  createExpenseCategory(createExpenseCategoryInput: CreateExpenseCategoryInput!): CommonExpenseCategoryResponse!
  updateExpenseCategory(id: Int!, updateExpenseCategoryInput: UpdateExpenseCategoryInput!): CommonExpenseCategoryResponse!
  removeExpenseCategory(id: Int!): CommonExpenseCategoryResponse!
  createExpenseSubCategory(createExpenseSubCategoryInput: CreateExpenseSubCategoryInput!): CommonExpenseSubCategoryResponse!
  updateExpenseSubCategory(id: Int!, updateExpenseSubCategoryInput: UpdateExpenseSubCategoryInput!): CommonExpenseSubCategoryResponse!
  removeExpenseSubCategory(id: Int!): CommonExpenseSubCategoryResponse!
  createExpense(createExpenseInput: CreateExpenseInput!): CommonExpenseResponse!
  updateExpense(id: Int!, updateExpenseInput: UpdateExpenseInput!): CommonExpenseResponse!
  removeExpense(id: Int!): CommonExpenseResponse!
  approveExpenses(ids: [Int!]!): CommonExpenseResponse!
  rejectExpenses(ids: [Int!]!): CommonExpenseResponse!
  paidExpenses(ids: [Int!]!): CommonExpenseResponse!
  createBankTransaction(createBankTransactionInput: CreateBankTransactionInput!): CommonBankTransactionResponse!
  removeBankTransaction(id: Int!): CommonBankTransactionResponse!
  createCompany(createCompanyInput: CreateCompanyInput!): CommonCompanyResponse!
  updateCompany(updateCompanyInput: UpdateCompanyInput!): CommonCompanyResponse!
  deleteCompany(id: Int!): CommonCompanyResponse!
  createForecast(createForecastInput: CreateForecastInput!): CommonForecastResponse!
  updateForecast(updateForecastInput: UpdateForecastInput!): CommonForecastResponse!
  removeForecast(id: Int!): CommonForecastResponse!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  role: String!
  companyId: Int
}

input UpdateUserInput {
  name: String
  email: String
  password: String
  role: String
  companyId: Int
  id: Int!
  isActive: Boolean!
}

input CreateBankAccountInput {
  companyId: Int!
  name: String!
  accountNumber: Float!
}

input UpdateBankAccountInput {
  id: Int!
  companyId: Float!
  name: String!
  accountNumber: Float!
  isActive: Boolean!
}

input CreateExpenseCategoryInput {
  name: String!
  isActive: Boolean = true
}

input UpdateExpenseCategoryInput {
  name: String
  isActive: Boolean = true
}

input CreateExpenseSubCategoryInput {
  name: String!
  expenseCategoryId: Int!
  isActive: Boolean = true
}

input UpdateExpenseSubCategoryInput {
  name: String
  expenseCategoryId: Int
  isActive: Boolean = true
}

input CreateExpenseInput {
  amount: Float!
  comments: String
  isPaymentRequest: Boolean! = false
  paidDate: Date
  expenseCategoryId: Int!
  expenseSubCategoryId: Int!
  employeeId: Int
  bankId: Int
  companyId: Int
}

input UpdateExpenseInput {
  amount: Float
  comments: String
  isPaymentRequest: Boolean = false
  paidDate: Date
  expenseCategoryId: Int
  expenseSubCategoryId: Int
  employeeId: Int
  bankId: Int
  companyId: Int
}

input CreateBankTransactionInput {
  bankId: Int!
  amount: Float!
  type: String!
  comment: String!
}

input CreateCompanyInput {
  name: String!
}

input UpdateCompanyInput {
  id: ID!
  name: String!
  isActive: Boolean!
}

input CreateForecastInput {
  amount: Float!
  comment: String!
  payDate: Date!
  expenseCategoryId: Float!
  expenseSubCategoryId: Float!
  staffId: Int
  companyId: Int!
  isGenerateForAllMonth: Boolean
}

input UpdateForecastInput {
  amount: Float!
  comment: String!
  payDate: DateTime!
  expenseCategoryId: Float!
  expenseSubCategoryId: Float!
  staffId: Int
  companyId: Int!
  isGenerateForAllMonth: Boolean
  id: Int!
  isUpdateForAllMonth: Boolean
}