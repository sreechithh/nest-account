# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Role {
  id: ID!
  name: String!
  createdAt: DateTime!
  isActive: Boolean!
  users: [User!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ExpenseSubCategory {
  id: Int!
  expenseCategoryId: Float!
  name: String!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  expenseCategory: ExpenseCategory!
  expenses: [Expense!]
}

type ExpenseCategory {
  id: Int!
  name: String!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  subCategories: [ExpenseSubCategory!]
  expenses: [Expense!]
}

type Company {
  id: Int!
  name: String!
  isActive: Boolean!
  salaryDate: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  bankAccounts: [BankAccount!]!
}

type BankAccount {
  id: ID!
  name: String!
  accountNumber: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: Float!
  updatedBy: Float!
  isActive: Boolean!
  bankBalance: Float!
  company: Company!
  bankTransactions: [BankTransaction!]!
}

type BankTransaction {
  id: Int!
  bankId: Int!
  amount: Float!
  type: TransactionType!
  comment: String!
  createdAt: DateTime!
  createdBy: Int!
  bankBalance: Int
  bankAccount: BankAccount!
  createdByUser: User!
  expense: Expense!
}

enum TransactionType {
  CREDIT
  DEBIT
}

type Expense {
  id: Int!
  adminResponse: DateTime
  amount: Float!
  comments: String
  status: ExpenseStatus!
  expenseCategoryId: Float!
  expenseSubCategoryId: Float!
  bankTransactionId: Float
  companyId: Float!
  paidAt: DateTime
  paidDate: Date
  isPaymentRequest: Boolean
  createdAt: DateTime!
  createdBy: Int!
  updatedAt: DateTime!
  updatedBy: Int
  expenseCategory: ExpenseCategory!
  expenseSubCategory: ExpenseSubCategory!
  employeeExpense: EmployeeExpense
  bankTransaction: BankTransaction
  company: Company
}

"""The status of an expense"""
enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type EmployeeExpense {
  id: Int!
  user: User!
  expense: Expense!
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: String!
  updatedBy: String!
  isActive: Boolean!
  roles: [Role!]!
  transactions: [BankTransaction!]!
  employeeExpenses: [EmployeeExpense!]!
}

type LoginResponse {
  access_token: String!
}

type Query {
  users: [User!]!
  user(id: Int!): User!
  me: String!
  bankAccounts: [BankAccount!]!
  bankAccount(id: Int!): BankAccount!
  expenseCategories: [ExpenseCategory!]!
  expenseCategory(id: Int!): ExpenseCategory!
  expenseSubCategories: [ExpenseSubCategory!]!
  expenseSubCategory(id: Int!): ExpenseSubCategory!
  expenses(pageSize: Int! = 10, pageNumber: Int! = 1): [Expense!]!
  expense(id: Int!): Expense!
  bankTransactions(pageSize: Int! = 10, pageNumber: Int! = 1): [BankTransaction!]!
  bankTransaction(id: Int!): BankTransaction!
  companies(pageSize: Int! = 10, pageNumber: Int! = 1): [Company!]!
  company(id: Int!): Company!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User!
  createBankAccount(createBankAccountInput: CreateBankAccountInput!): BankAccount!
  updateBankAccount(updateBankAccountInput: UpdateBankAccountInput!): BankAccount!
  removeBankAccount(id: Int!): Boolean!
  login(email: String!, password: String!): LoginResponse!
  createExpenseCategory(createExpenseCategoryInput: CreateExpenseCategoryInput!): ExpenseCategory!
  updateExpenseCategory(id: Int!, updateExpenseCategoryInput: UpdateExpenseCategoryInput!): ExpenseCategory!
  removeExpenseCategory(id: Int!): ExpenseCategory!
  createExpenseSubCategory(createExpenseSubCategoryInput: CreateExpenseSubCategoryInput!): ExpenseSubCategory!
  updateExpenseSubCategory(id: Int!, updateExpenseSubCategoryInput: UpdateExpenseSubCategoryInput!): ExpenseSubCategory!
  removeExpenseSubCategory(id: Int!): ExpenseSubCategory!
  createExpense(createExpenseInput: CreateExpenseInput!): Expense!
  updateExpense(id: Int!, updateExpenseInput: UpdateExpenseInput!): Expense!
  removeExpense(id: Int!): Expense!
  approveExpenses(ids: [Int!]!): Boolean!
  rejectExpenses(ids: [Int!]!): Boolean!
  paidExpenses(ids: [Int!]!): Boolean!
  createBankTransaction(createBankTransactionInput: CreateBankTransactionInput!): BankTransaction!
  removeBankTransaction(id: Int!): String!
  createCompany(createCompanyInput: CreateCompanyInput!): Company!
  updateCompany(updateCompanyInput: UpdateCompanyInput!): Company!
  deleteCompany(id: Int!): Boolean!
}

input CreateUserInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateUserInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateBankAccountInput {
  companyId: Int!
  name: String!
  accountNumber: String!
  bankBalance: Float!
}

input UpdateBankAccountInput {
  id: Int!
  companyId: Float!
  name: String!
  accountNumber: String!
  isActive: Boolean!
}

input CreateExpenseCategoryInput {
  name: String!
  isActive: Boolean = true
}

input UpdateExpenseCategoryInput {
  name: String
  isActive: Boolean = true
}

input CreateExpenseSubCategoryInput {
  name: String!
  expenseCategoryId: Int!
  isActive: Boolean = true
}

input UpdateExpenseSubCategoryInput {
  name: String
  expenseCategoryId: Int
  isActive: Boolean = true
}

input CreateExpenseInput {
  amount: Float!
  comments: String
  isPaymentRequest: Boolean! = false
  paidDate: Date
  expenseCategoryId: Int!
  expenseSubCategoryId: Int!
  employeeId: Int
  bankId: Int
  companyId: Int
}

input UpdateExpenseInput {
  amount: Float
  comments: String
  isPaymentRequest: Boolean = false
  paidDate: Date
  expenseCategoryId: Int
  expenseSubCategoryId: Int
  employeeId: Int
  bankId: Int
  companyId: Int
}

input CreateBankTransactionInput {
  bankId: Int!
  amount: Float!
  type: String!
  comment: String!
}

input CreateCompanyInput {
  name: String!
  salaryDate: Float!
}

input UpdateCompanyInput {
  id: ID!
  name: String!
  salaryDate: Float!
  isActive: Boolean!
}